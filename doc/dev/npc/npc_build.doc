/****************************************************************
*								*
* Document:	How to be code an NPC (a Non-Player Character,	*
*		commonly referred to as a "monster").		*
* Relates to:	/lib/npc.c; used by #include <npc.h>		*
* Version:	Version 1.00					*
* Updates:      Updated 19-aug-95 by Doomdark.                  *
* Last update:  add_block description 6-nov-95 by Colt.         *
* Description:	Describes how NPCs can be coded. For more	*
*		specific descriptions of functions used,	*
*		check out "monster_modify_funs.doc".		*
*								*
****************************************************************/

-------------------------------------------------------------------
Most important function coders have to define (unless cloning
an NPC):

        o create_monster()

Sometimes you also want to define following functions:

        o reset_monster()
        o init_monster()
	o monster_died()
	o extra_aggressive()

More useful functions you can define are described in documents:

	o interaction.doc

And finally, functions standard NPC-object defines for you to use
are described in:

	o monster_modify_funs.doc
	o monster_query_funs.doc
	o equipping.doc
	o npc_groups.doc

===================================================================
void create_monster()

DESCRIPTION:
	This function is called when the NPC is created. Usually
	NPC will be set up through this function. Set descriptions,
	levels, race, and perhaps statistics like amount of hps,
	sps etc. from create_monster(). You can also equip your
	NPC at create_monster(); more about how to do that is to
	be found from document "equipping.doc".

NOTE:	Don't use Game Driver predefined function 'create()'!
	At the moment you can still mask over it and it could cause 
	unwanted situations if you don't know what you are doing.
	create() is reserved for generic level settings and
	create_monster() is called from it.
-------------------------------------------------------------------
void reset_monster()

DESCRIPTION:
	This function is called when the NPC resets after a random
	interval (usually something like 30 mins). You can define
	this functions if you want something to happen at that
	time.

NOTE:	Don't use Game Driver predefined function 'reset()'! The
	reasons are like explained above with "create"; in addition,
	using 'reset' will prevent 'create_monster' being called
	because of the way our current gamedriver works!
------------------------------------------------------------------
void init_monster()

DESCRIPTION:
	This function is called every time a 'living'  object enters
	the room we are in (objects that have called function
	enable_commands(), players and monsters usually).
	This function is a good place some operations to be done
	when a player enters the room we are in.

NOTE:	Don't use Game Driver predefined function 'init()'.
	Note also that arrive message for player gets printed
	_after_ init_monster is called. This means that you usually
	should use some delay (call_out) if you want to give some
	message when a player or monster arrives to same room.
	Also note that some objects are living as well; you can't
	count on this_player() being actually always a player or
	monster! :-(
------------------------------------------------------------------
status monster_died(object this_npc)

DESCRIPTION:
	This function will get called by standard NPC-code when
	this NPC dies, if function "set_dead_ob" is called prior
	to death. The function is called in object specified
	as the argument of the call to "set_dead_ob"; if you wish
	it to be called on this npc, use call
	"set_dead_ob(this_object())" (at create_monster for
	example).
	Return value decides whether this NPC-object should be
	destructed. If you return 0, it will, otherwise not.
	The argument to the call is the NPC who died.

NOTE:
	Note that call to this function is done after all other
	death-related things are done; moving all eq to the room
	this NPC is, adding to exp to the killer, printing
	messages and so on. So, it's seldom of much use to return
	1 is here to prevent destructing this object. It can be
	used for few things, however... :-)
------------------------------------------------------------------
status extra_aggressive(object who)

DESCRIPTION:
	This will be called after init_monster, to decide whether
	we should be aggressive towards the player or NPC who
	arrived to the same room. If we want to be aggressive
	(ie. want to attack), return 1, otherwise return 0.
	Note that you can use function call "set(NPC_AGGRESSIVE)"
	to make this NPC aggressive towards all players; only
	define this functions if you want to attack some players
	and/or NPCs, not all (or none).
	The argument is the player/NPC who arrived to the same
	room.
------------------------------------------------------------------
status add_block(string dir,mixed type,mixed crit1,mixed crit2,
                 string msg1,string msg2,string msg3,string msg4)

DESCRIPTION:
        This is used to block exits when this monster is present.
        Try to use this, rather than seting up the block function
        in the room code.
ARGUMENTS:
        1st: The first argument is a string describing the direction
             to be blocked, ie. "east".
        2nd: The second argument describes WHAT is to be blocked.
             Currently you have these options: all, level, race, 
		name, alignment, or guild.
        3rd: The third argument describes the specifics of the 
             second argument, ie. which level, which race, which 
             name, or which guild.
        4th: The forth argument is the opposite of the 3rd.  It 
             describes who the block WON'T affect.
        5th: The fifth argument is the string that the blockee 
             will get when he/she is blocked.
		Can be an SSF-string (refer to misc/SSF.doc!)
        6th: The sixth argument is the string that other people
             in the room will receive when the blockee is blocked.
		Can be an SSF-string as well...
        7th: The seventh argument is the string this_player() will
             will receive if he/she is allowed through the 
             blocked exit.
		Can be an SSF-string too...
        8th: The eighth argument is the string that
             environment(this_player()) will receive when
             this_player() is allowed through a blocked exit.
		- And this one as well -
NOTES:
        To remove a block that has been added, simply use:
        add_block("east",0,0,0,0,0,0,0);.  Also, under most 
        circumstances, either argument 3 or 4 will be 0, as they
        are opposites of one another.  Also, arguments 3 and 4 can
        be arrays.
	And once again, arguments 5-8 can all be those overhyped
	SSF-strings... :-)
-----------------------------------------------------------------

 Putting it all together:

==================================================================

 Let's examine an example of a simple NPC. See other documentation 
 for function descriptions in case it's not explained here.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/*******************************************

 NAME:    example_npc.c

 PURPOSE: Example for newbie coders.

 AUTHOR:  Doomdark

 *******************************************/

#include <npc.h>
// We have to include this file; it inherits /lib/npc.c and defines some
// important values (alignment levels, gender types, attack types...)

void
create_room()
{
	set_name("big orc");
	set_race("orc");
	set_short("A big orc");
	set_long("It is a big nasty-looking orc. It eyes you rather\
 suspiciously.");
	set_level(25);	// Remember to set this before other stat sets!
// Note: You don't usually need to set_wc, set_ac or set_hp!
	set_hp(500);	// Let's put some more than what set_level would set
	set_alignment(AL_NASTY);	// This is a nasty creature...
	set_gender(G_NEUTER);		// Not male or female
// Then let's add some messages we will print when not fighting.
	load_chat(8, ({
"Big orc says: Me hate elves!",
"Big orc says: Best elf - dead elf!",
"Bir orc grunts."
	}));
// And let's also add some messages we print while fighting:
	load_a_chat(10, ({
"Big orc yells: Kill! Kill! Kill!",
"Big orc says: You elf shit, you fairy puke!"
	}));
	set_dead_ob(this_object());	// So, "monster_died" will be called!
      /*Let's block the east direction from elves */
      add_block("east","race","elf",0,
"%<me.name>% yells: ME TROLL NO LET STINKY %<upper_case(him.race)>%\
 EAST WITHOUT FIGHT!",
"%<me.name>% grabs %<him.name>% by the neck \
and says: ME TROLL NO LET STINKY %<upper_case(him.race)>% EAST WITHOUT FIGHT!",
"%<me.name>% tells you: You no elf, you go on your way!",
"%<me.name>% troll says something to %<him.name>%"."
	);
}

// Let's move monster at reset time... This could be done by
// a call to "set(NPC_MOVE_AT_RESET)" as well, though!
void
reset_monster()
{
mapping x;
	tell_here("Big troll says angrily: Blaah!\
 Where all elves gone? Me want kill all elves!\n\
Big troll says: Me going to search elf!", this_object());
	if (x = (mapping) environment()->query_exits()) {
// Let's try to move to some exit direction...
// Complex-looking code, isn't it? 8-)
		init_command(m_indices(x)[random(m_sizeof(x))]);
	}
}

// Now, let's attack only elves!
status
extra_aggressive(object who)
{
	if (who -> id("elf"))
		return 1;
	return 0;
}

// Also, let's do a trick with "monster_died"-function!
status
monster_died(object this_npc)
{
	tell_here("Maybe it's just you, but it looks just like\
 lips of corpse of the big troll just try to form some words:\
 '... shit crap elf...'. Hmmh. Some last words...", this_object());
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Good to know:

There are specialized standard NPCs to be used when you want your
NPC to have some equipment, or to form a group, in which case all
members of the npc group fight as a group; ie. if one is attacked,
others will help. Check out documents "equipping.doc" and
"npc_groups.doc" for further info.
------------------------------------------------------------------
