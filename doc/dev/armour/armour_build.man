/****************************************************************
*								*
* Document:	How to be code an armour.			*
* Relates to:	/lib/armour.c; used by #include <armour.h>	*
* Version:	Version 1.01					*
* Last update:	Last update 5-May-98 by Graah.			*
*		Note about boosts added: 7-May-97 / Graah	*
*		set_race() documented 5-May-98 / Graah		*
* Description:	Describes how armours can be coded. For more	*
*		specific descriptions of functions used,	*
*		check out "armour_modify_funs.doc" (soon to be	*
*		written!).					*
*								*
****************************************************************/

-------------------------------------------------------------------
Most important function coders have to define (unless cloning
the armour):

        o create_armour()

Sometimes you also want to define following functions:

        o reset_armour()
        o init_armour()

Other useful functions you may sometimes need to define:
	o wear
	o unwear

And, occasionally, you'll have to mask (re-define) these functions,
defined by standard armour object:
	o wear_me
	o unwear_me

Finally, documents that describe functions standard armour object
defines are (not written yet... :-( ):

	o armour_modify_funs.doc
	o armour_query_funs.doc

NOTE: If armour boosts stats, it MUST have an equal number of
drains, or other disadvantages! Only unique QUEST stuff might
have something else. That is, items that can only be gained
once by one player. These kind of quests must also have a level
limit of at least 16, otherwise there will soon be hundreds of
illegal seconds getting those quest items. /Graah

===================================================================
void create_armour()

DESCRIPTION:
	This function is called when the armour is created. Usually
	armour will be set up through this function. Set descriptions,
	armour class, weight and such stats.

NOTE:	Don't use Game Driver predefined function 'create()'!
	At the moment you can still mask over it and it could cause 
	unwanted situations if you don't know what you are doing.
	create() is reserved for generic level settings and
	create_armour() is called from it.
-------------------------------------------------------------------
void reset_armour()

DESCRIPTION:
	This function is called when the armour resets after a random
	interval (usually something like 30 mins). You can define
	this functions if you want something to happen at that
	time.

NOTE:	Don't use Game Driver predefined function 'reset()'! The
	reasons are like explained above with "create"; in addition,
	using 'reset' will prevent 'create_armour' being called
	because of the way our current gamedriver works!
------------------------------------------------------------------
void init_armour()

DESCRIPTION:
	This function is called every time a 'living'  object enters
	the room we are in (objects that have called function
	enable_commands(), players and monsters usually), or when
	this armour is moved inside a living (usually, when player
	takes this armour!).
	This function is a good place some operations to be done
	when a player takes this armour.

NOTE:	Don't use Game Driver predefined function 'init()'.
	Note also that arrive message for player gets printed
	_after_ init_armour is called. This means that you usually
	should use some delay (call_out) if you want to give some
	message when a player or monster arrives to same room.
	Also note that some objects are living as well; you can't
	count on this_player() being actually always a player or
	monster! :-(
------------------------------------------------------------------
This actually belongs to armour_modify_funs.doc - which doesn't
exist yet.

void set_race(string race)

	You can setup an armour to fit only one (or more) of
	the races. set_race("orc") means it fits only orcs
	and half-orcs, set_race("hobbit") would fit only hobbits.
	You can also set many races, such as set_race("elf#human")
	or set_race("orc#dwarf#troll") [that would have to be
	a helmet or something - what else could it be than the
	thick bone head of those races?]
	set_race(0) removes racial restrictions.

	"elf" = "dark elf", you can set either, but the armour
	would fit both normal and dark elves. "orc" is the same
	as "half-orc", except "orc" armour can be worn by npcs.

	NOTE: Make sure your NPC can wear the thing, if that is
	the intention. I.e. the NPCs race must also be included
	in armour's race variable! Such as "giant#troll" or
	"hobbit#pixie#sprite".

------------------------------------------------------------------

 Putting it all together:

==================================================================

 Let's examine an example of a simple NPC. See other documentation 
 for function descriptions in case it's not explained here.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/*******************************************

 NAME:    example_armour.c

 PURPOSE: Example for newbie coders.

 AUTHOR:  Doomdark

 *******************************************/

#include <armour.h>
// We have to include this file; it inherits /lib/armour.c and defines
// some useful values (needed if we add special properties, for
// example)
#include <stats.h>
// Since we will be draining stats, we'll need this header file too!
#include <conditions.h>
// Also, as we will be causing a condition, we'll need this header file

void
create_armour()
{
	set_name("pair of black gloves");
	set_type("gloves");
	set_id(({ "black gloves", "pair of gloves" }));
	set_short("a pair of black gloves");
	set_long("It is a pair of black gloves. Somehow you feel uneasy\
 looking at those gloves. It's as if there was a black sphere surrounding\
 them. Must be just your imagination, though.");
	set_ac(1);
	set_weight(2);
	add_special_property(ARM_SP_DRAIN_STAT, ST_DEX, 2);
// These will drain dexterity by 2 when worn!
	add_special_property(ARM_SP_CAUSE_CONDITION, C_BLIND, 1);
// In addition, player will go blind. Nasty aren't we?
	set_curse(CT_CURSED, 0);
// And if that's not enough, let's curse 'em. Armour class will stay
// as 1 though.
}

// Let's just print a message if we're worn by someone...
void
reset_armour()
{
object w;
	if (w = query_worn_by()) {
		w->tell_me("You feel like gloves were scratching your\
 fingers!");
// We could do something nasty like:
//	w->add_hp(-10);
// too... but not this time.
	}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
