/****************************************************************
*								*
* Document:	How to be code a weapon.			*
* Relates to:	/lib/weapon.c; used by #include <weapon.h>	*
* Version:	Version 1.00					*
* Last update:	Last update 10-oct-95 by Doomdark.		*
* Description:	Describes how weapons can (and should!) be coded*
*               For more specific descriptions of functions     *
*               used, check out "weapon_funs.doc".		*
*								*
****************************************************************/

-------------------------------------------------------------------
Important functions coders can define:

        o create_weapon()
        o reset_weapon()
        o init_weapon()
        o wield()
        o unwield()
        o weapon_hit()

Sometimes it's also necessary to mask (ie., redefine) following
functions already defined by standard weapon object:

        o wield_me()
        o unwield_me()

===================================================================
void create_weapon()

DESCRIPTION:
	This function is called when the weapon is created. Usually
	weapon will be set up through this function. Set descriptions,
	weapon/hit class, weight and possible other attributes
        (2-handedness, is it a "troll weapon"...) in create_weapon().
NOTE:
	Don't use Game Driver predefined function 'create()'!
	At the moment you can still mask over it and it could cause 
	unwanted situations if you don't know what you are doing.
	Create() is reserved for generic level settings and
	create_room() is called from it.
-------------------------------------------------------------------
void reset_weapon()

DESCRIPTION:
	This function is called when the weapon resets after random
	intervals (usually something like 30 mins). It's seldom of
        much use to define this function, but occasionally you might
        want to use it.
NOTE:
	Don't use Game Driver predefined function 'reset()'! The
	reasons are like explained above with "create"; in addition,
	using 'reset' will prevent 'create_weapon' being called
        because of the way our current gamedriver works!
------------------------------------------------------------------
void init_weapon()

DESCRIPTION:
	This function is called every time a 'living'  object enters
	the room in which this weapon lies in, or when this weapon
        is moved inside a living object (for example, when player
        takes this weapon). You may add special commands to be used
        with this weapon with "add_action" efun in init_weapon, if
        you need to. Note however that you usually don't have to
        add any commands yourself, as many standard commands call
        "the object in question" after parsing the command. For
        example, when player enters "read sword", standard read-
        command (from /bin/pub/_read.c) checks if there is an item
        of which id is "sword" in either player's inventory, or
        in the room player is in, and if so, calls function
        "read_cmd(string s, object player)" in the item (sword)
        in question.
NOTE:
	Don't use Game Driver predefined function 'init()' (unless
        you really have to!). Note also that arrive message for
        player gets printed _after_ init_weapon is called. This
        means that you usually should use some delay (call_out) if
        you want to give some message when a player or monster
        arrives. Also note that some objects are living as well;
        you can't count on this_player() being actually a player
        or monster! :-(
        Also, DO _NOT_ ADD "WIELD", "UNWIELD" or "REMOVE"-commands!
        We have good standard versions of these; you can customize
        them without masking them!
------------------------------------------------------------------
int weapon_hit(object enemy, object wielder)

DESCRIPTION:
        If you have called "set_hit_func", this function will be
        called on object that was defined in the call. Usually,
        you use call "set_hit_func(this_object())"; in which case
        function in this object (weapon) will be called. Time when
        call is done is when wielder hits an enemy with the weapon.
        The value you return is added to the total damage inflicted
        to the enemy. Usually, you will randomize damage, so that
        extra damage is done only at some, say 25% of the time or
        so. Other times you want special damage only against
        some type of monsters.
NOTE:
        You should use this function only for weapons that are
        unique/pseudo-unique, or rare otherwise. This function
        is somewhat costly, so shouldn't be used without
        considering if it's really necessary.
------------------------------------------------------------------
status wield(object this_weapon, object wielder)

DESCRIPTION:
        If you have called "set_wield_func", this function will be
        called on object that was defined in the call. As with
        "set_hit_func", you usually use this_object() as argument
        and thus function will be called on this weapon.
        This function is ideal place for extra checks to be done
        when a player (or NPC) tries to wield this weapon.
        If you return 0, wielding will succeed normally. Otherwise
        wielding is prevented and no other messages will get printed.
        Thus, you need to print your own "fail messages", if you
        want to prevent wielding by returning 1.
NOTE:
        Return 0 for 'succeed' and 1 for fail may first appear
        as illogical thing. However, this same logic is used in
        multiple places to inform standard object that we have
        'processed' this call by ourselves, when we return 1, and
        that we have not done anything, when we return 0. For
        example, with standard rooms you can easily block a visible
        exit by adding a command, and returning 1 from the function
        that gets called, if exit should not be used normally.
        Also, note that at this point you SHOULD NOT count on
        wielding to actually happen. Many things can happen;
        player may already be wielding another weapon etc. This
        function will be _the first_ function to be called after
        player tries to wield this weapon.
------------------------------------------------------------------
status unwield(object this_weapon, object wielder)

DESCRIPTION:
        This is almost identical to the previous function; except
        that it gets called when player/NPC tries to remove
        ('unwield') this weapon. Call will be done if you have
        called "set_unwield_func" before unwielding happening.
NOTE:
        Same guidelines apply for this function as previous
        function ("wield").
------------------------------------------------------------------
status wield_me(object wielder, status silent, string hand)

DESCRIPTION:
        This function defined by standard weapon object will be
        called when a living object tries to wield this weapon.
        This in turn will first call "wield" (if "set_wield_func"
        called prior to this point; see description of the func
        above), and after that do various checks to see if
        wielding indeed is possible. If so, it will set up
        necessary variables in weapon object, change short
        description (usually to something like "xxxx (wielded)"),
        possibly add some extra conditions/stat boosts to
        the wielded (if added with "add_special_property),
         and return 1. If wielding couldn't be done, it returns 0.
        This function occasionally needs to masked by a weapon,
        to do some odd things after making sure player/NPC
        indeed did wield this weapon. If you need to mask this
        function, be sure to call "old version" of this function
        with call (and also check the returned value!)
        "x = ::wield_me(wielder, silent, hand)", check out the
        return value ("if (x) ..."), and act accordingly.
NOTE:
        If possible, try to avoid masking standard functions
        on standard objects. If (when) mudlib changes, these
        masked functions most often cause incompatibility
        problems.
        Also, note that you should only print messages, when
        'silent' is 0.
------------------------------------------------------------------
status unwield_me(object wielder, status silent)

DESCRIPTION:
        This functions works much the same as previoud one
        ("wield_me"), except that it gets called when player/NPC
        tries to remove ('unwield') this weapon. Same notes apply
        to this functions than to "wield_me". Usually, when you
        need to mask "wield_me", you also need to mask "unwield_me".
NOTE:
        Same as above ("wield_me").
------------------------------------------------------------------

 Putting it all together:

==================================================================

 Let's examine an example of a weapon. See other documentation 
 for descriptions of functions not explained here.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/*******************************************

 NAME:    example_weapon.c

 PURPOSE: Example for newbie coders.

 AUTHOR:  Doomdark

 *******************************************/

#include <weapon.h>
// We have to include this file; it inherits /lib/weapon.c and defines
// some important constants (used by set() & query() usually)

status elf_hit;         // This is to know if we've hit an elf!

void
create_weapon()
{
        set_name("wooden club");
        set_id(({ "club" }));
	set_short("A wooden club");
	set_long("It is a crude wooden club. It has some bloodstains on it.\
 There seems to be some writing on it.");
        set(WP_BLUNT);              // Is a blunt weapon.
        set(WP_TROLL_WEAPON);       // Sure, trolls can wield this.
        set_weight(4);              // Rather heavy
        set_wc(14);                 // Decent damage
        set_value(120);             // Not too valuable.
        set(WP_TWO_HANDED);         // Has to be 2-handed; so heavy
        set(WP_TROLL_1H);            // Except for trolls!
        set(WP_DAMAGE_TYPE, DT_BLUNT); // (default for blunt weapons)
        set_read("The writing says: 'Trols role Ok!'. Hmmh.\
 Seems to be written by some illiterate troll... In elf blood...");

// Now, let's direct weapon to call functions in this object, when
// players is about to wield, remove (== unwield!) or hit wit with
// this weapon. We could re-direct these to some combat daemon, or
// whatever, if we wanted to!

        set_wield_func(this_object());
        set_unwield_func(this_object());
        set_hit_func(this_object());
        elf_hit = 0;
}

status
wield(object this_weapon, object wielder)
{
// If wielder is an elf, let's not let him/her wield it!
        if ((string) wielder->query_race() == "elf") {
            wielder->tell_me("As you are about to wield the wooden\
 club, you notice the ugly writing on it.\n\
YUCK! No way you're going to wield that disgusting lousy troll thing!");
            return 1;
        }
// Otherwise let's let 'em wield this weapon...
        return 0;
}

status
unwield(object this_weapon, object unwielder)
{
// If wielder is a troll, let's not let him/her unwield it, unless
// he/she has already hit an elf with it!!!
        if (!elf_hit && (string) unwielder->query_race() == "troll") {
            unwielder->tell_me("As you are about to remove the wooden\
 club, you feel it fasten to your hand!\n\
You can't remove it!\n\
Obviously the club wants something... Elf blood, perhaps?");
            return 1;
        }
// Otherwise, let's let it be removed...
        return 0;
}

int
weapon_hit(object enemy, object wielder)
{
string my_name, his_name;
        if (!enemy || !wielder) return 0;
// If we've already hit an elf we'll only get special hit every
// fourth hit (in average). 
        if (elf_hit && random(4)) return 0;
        if (!enemy->id("elf")) return 0;
// If enemy isn't an elf, no special hit.
        my_name = (string) wielder->query_name();
        his_name = (string) enemy->query_name();
        wielder->tell_me("You feel wooden club hits harder when hitting\
 an elf!");
        enemy->tell_me("OUCH! "+my_name+"'s wooden club somehow seems\
 to beat you extremely hard!");
        environment(wielder)->tell_here(my_name+"'s wooden club hits "
+ his_name+" extremely hard!", ({ wielder, enemy }));
        if (!elf_hit) {
            wielder->tell_me("Your wooden club grunts in satisfaction!");
            elf_hit = 1;
        }
        return 2 + random(5);       // 2 - 6 hps of extra damage / hit.

}

// We have to clear the 'elf_hit', in case some other player/NPC
// wields this weapon.
status
wield_me(object wielder, status silent, string hand)
{
mixed x;
        x = ::wield_me(wielder, silent, hand);
        if (x) {
            elf_hit = 0;
            if (!silent) wielder->tell_me("You somehow feel strong urge\
 to go killing elves!");
        }
        return x;
}

// We actually wouldn't need to mask this function so bad, but just
// to show you how to do it when you need, here we go...
status
unwield_me(object unwielder, status silent)
{
mixed x;
        x = ::unwield_me(unwielder, silent);
        if (x && !silent && (string) unwielder->query_race() == "troll") {
// Let's print a stupid little message...
            unwielder->tell_me("What a pity. It was such a nice club...");
        }
        return x;
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
