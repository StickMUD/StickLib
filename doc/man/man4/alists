Article 6089 of rec.games.mud.lp:
From: John.Coy@f1.n3821.z1.fidonet.org (John Coy)
Sender: Jpunix@urchin.fidonet.org
Path: network.jyu.fi!news.funet.fi!sunic!pipex!uunet!zaphod.mps.ohio-state.edu!menudo.uh.edu!jpunix!urchin!Jpunix
Newsgroups: rec.games.mud.lp
Subject: order_alist(), assoc()
Message-ID: <734580365.AA03470@urchin.fidonet.org>
Date: Sun, 11 Apr 1993 16:24:00 -0500
Lines: 120

If you've ever been frustrated trying to read the docs for
alists in lpmud 3.1.2, you'll be happy to read this document.
I researched the subject all day and have written a help file
which covers the basics of alists.  While there are some things
I've certainly left out, you should be able to get alists
going on your mud w/ this information.  This means that even
3.1.2 -compat muds can get that daemon-oriented feeling of
MudOS mudlibs (such as Nightmare's mudlib, which uses mappings
quite heavily)

Before we begin, let me tell how I use the following words.  
While my definitions my not be totally accurate, if you
understand them in this way, it will be easy to understand
my logic when it comes to alists.

1) index (or indicies) of an array:  
   The index of a standard array is normally the number
   you include within the brackets when you want to extract
   an element from an array.  For example, if you were to
   write: x = array[5];  the '5' would be the index of
   the array.

2) element of an array:
   The element of an array is the value associated with
   a particular index of an array.  For example, in the
   array: example = ({ "first_element", "second_element" }),
   the elements are clearly marked by "first_element" and
   "second_element".  To assign these values to a variable,
   you would write: var = example[1] - this would set
   the value of var equal to "second_element".

3) 'points to':
   When used w/in this text, 'points to' merely
   refers to an index being associated with a particular element
   of an array.  So, if you write: example[1], the index '1' 
   points to the second element of the array 'example'.

4) mapping
   I use the word 'mapping' to refer to 'alists' because they are
   so similar.  I probably use them interchangably w/in this
   description.  If this is confusing, I apologize.

5) key
   A key is simply an index for a value in a mapping (or alist).

To create an 'alist' (or a mapping, from my perspective), you
have to do the following:

1) Declare an array containing the 'keys' of the mapping.  
   That's nothing more than a confusing name for 'indicies'.
   Just like indicies on a normal array, the 'key' points to
   a specific value w/in the mapping.

2) Declare an array containing the 'elements' of the mapping.
   These are the values to which the 'keys' point.  Elements
   of a mapping are the same thing as elements of a normal
   array.

3) Construct the mapping by using the following function:
   map = order_alist(keys, elements)
   where map      = the variable to contain the alist
         keys     = the 'keys' or 'indicies' of the mapping
         elements = the 'elements' of the mapping

That's about all there is to it.  I believe that the idea behind
alists is so that arrays can have indicies of a data type other
than integer.  In LPMud 3.1.2, you can achieve this
effect using alists, but not directly.  _I_ would have assumed
that once the alist had been constructed, I could extract an element
from it by using a call with this syntax:
    value = map["key"];
  
However, the parser gags on this syntax.  This is what the
assoc() function is all about.  If you want to extract an
element from an alist, simply use the following syntax:
    value = assoc(key, alist);

Here is an example program which uses alists and its output:

example_alists() {
    string keys, elements, alist;
    int    x, y;

    /* setup the keys for the alist */
    keys = ({ "one", "two", "three" });

    /* setup the indicies for the alist */
    data = ({ "first", "second", "third" });

    /* construct the alist itself */
    alist = order_alist(keys, data);

    /* this routine is fascinating:  it shows the ACTUAL
       contents of the alist as a two-dimensional array.
       Quite intriguing, but I don't know much other use
       for it other than for show */
    for (x = 0; x < sizeof(alist); x++) {
        for (y = 0; y < sizeof(alist[x]); y++)
            write("Members of alist at ["+x+", "+y+"]  "+alist[x][y]+"\n");
    }
   
    /* actually extract a value from an alist */
    x = assoc("two", alist);

    /* display the value we extracted using assoc() */
    write("Extract the value 'two' points to: "+x+"\n");
}

... output of above program if placed in an object which calls it ...

Members of alist at [0, 0]  one
Members of alist at [0, 1]  two
Members of alist at [0, 2]  three
Members of alist at [1, 0]  first
Members of alist at [1, 1]  second
Members of alist at [1, 2]  third

Extract the value 'two' points to: second




