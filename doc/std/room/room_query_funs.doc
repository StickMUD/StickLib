
 /room/room.c functions and usage:
 ---------------------------------
 
QUERY FUNCTIONS*******************************************************


status	query(int)

int	query_total_light()
int	query_light()
int	query_light_level()

string	query_long_desc()
string	query_long(string, object)
string	query_short_desc()
string	query_short(int, object)

string	*query_items()
mapping	query_exits()
string	query_exit(string)
mapping	query_commands()

mixed	query_property(string)
string	*query_dest_dir()

---------------------------------------------------------------------
status query(int)

DESCRIPTION: Test whether a specified condition is true; conditions
	are same as those set with "set(x)"-function. Check
	"room_modify_funs.doc" for further info.
	Also,this function now can return more varied results;
	for example, with ROOM_WD, it returns 'outdoorness level'
	of the room, ie. WD_INDOORS, WD_OUTDOORS or WD_NONE.

RETURN(int): Whether specified condition is true or false
	(1 true, 0 false), OR, integer return value (for example
	with ROOM_WD).

ARGUMENT(int): Which condition to test. Currently used values are:
	SKIP_EXITS, SHOW_EXITS, PREVENT_TELEPORT, ALLOW_TELEPORT,
	NO_CLEANUP, YES_CLEANUP, NO_PK, YES_PK, IN_CITY, OUT_CITY,
	PREVENT/ALLOW_TELEPORT_FROM/TO, ROOM_WD, ROOM_PREVENT_WHERE,
	ROOM_ALLOW_WHERE.
	For more info about these conditions, check out function
	"set(x)" from "room_modify_funs.doc".
---------------------------------------------------------------------
int query_total_light()  
 
DESCRIPTION: Get the total light of this room. The total light
             consists of the light of the room and other objects
             in this room. Include lights.h for defined light levels.
             See /include/lights.h for actual values.
 
RETURN(int): total light in this room. 
---------------------------------------------------------------------
int query_light()        
 
- Same as previous. Please do not use this any more.
---------------------------------------------------------------------
int query_light_level()  
 
DESCRIPTION: The light level of the room itself.
 
RETURN(int): Light level of the room. Not same as total light;
	players may carry torches etc.
--------------------------------------------------------------------
string query_long_desc()
 
DESCRIPTION: Get the long description of room. Long description
             might not have line feeds (in fact, it _shouldn't_)!
 
RETURN(string) Long description. 0, if no description.

NOTE: This only returns long_desc set by set_long-function. It does
not return exit lists nor additional information. If you need that,
use "query_long" instead.
------------------------------------------------------------------
string query_long(string, object)


DESCRIPTION: Get long description of room, or description of an item
        in the room (set with add_item/set_items).


RETURN(string): Either long description of the room including the exit
        list (if string argument is 0), or description of the item
        of which id matches string argument. This is used (for example)
        by "examine"-command (in /bin/pub/_examine.c).


ARGUMENTS: string -> id of the item of which long description we
        want to get. If this is 0, we'll get long desc of the room.
        object -> player who 'wants to see' the long description.
        Usually it'll be this_player(). Please use this argument too
        as this allows some neat tricks (different players can see
        room/items differently).
------------------------------------------------------------------
string query_short_desc()
 
DESCRIPTION: Get the short description of room.
 
RETURN(string): Short description. 0, if no description.

NOTE: This only returns string set by set_short-function. If you also
 want to get short exit list, use "query_short" instead.
------------------------------------------------------------------
string query_short(int, object)


DESCRIPTION: Get the short description of room, including exit list.


RETURN(string): Short description plus exit list in parenthesis
        (if you have brief mode, this is the desc you get when
        moving).


ARGUMENTS: int -> mode we are using; bitfields used: 0 -> show
        exit list too, 1 -> test darkness.
        object -> player who 'wants to get short description';
        player moving into room, or using the command. Usually
        'this_player()'. Please use this so objects can 'look
        different' to different players.
-----------------------------------------------------------------
mapping query_items()
 
DESCRIPTION: Get room items. Items are special descriptions for
	interesting parts of the room description.
 
RETURN(mapping): Item list: ([ item_name : item_description, ... ])
	 0, if no items.
------------------------------------------------------------------
mapping query_exits()
 
DESCRIPTION: Get room exists.
 
RETURN(mapping): ([ direction_str : roomfile_str, ... ])
                 0, if no exits.
 
NOTE: Use this function instead of query_dest_dir()
-----------------------------------------------------------------
string query_exit(string dir)
 
DESCRIPTION: Get the file name for exit. Can be used for testing if
             direction exists.
 
ARGUMENT(dir): Direction description ("south" etc.)
 
RETURN(string): Room file name of argument <dir>.
                0, if no such direction.
-----------------------------------------------------------------
mapping query_commands()
 
DESCRIPTION: Get commands set with add_command() or set_commands().
 
RETURN(mapping): Commands (add with add_command()).
                 Type of: ([ command_str : function_name_str, ... ])
                 0, if no commands.
-----------------------------------------------------------------
mixed query_property(string str)
 
DESCRIPTION: Get property list or test if property exists. Property

             is set for identify different room modes. For example
             there is a property for player killing rooms.
 
ARGUMENT(str): Test if argument is a property of this room. If
               str is 0, property list is returned.
 
RETURN(mixed): 1 if matched. 0 if no match. List is type of:
               ({ prop_str/prop_array, ... })
-----------------------------------------------------------------
string *query_dest_dir() 
 
DESCRIPTION: Get defined exits of this room.
 
RETURN(string): Exits in the room. Return value is type: 
({ <roomfile>, <direction>, <roomfile2>, <direction2>, ... }).
 
NOTE: Use query_exits() rather than this function.
-----------------------------------------------------------------
