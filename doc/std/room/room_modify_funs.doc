/****************************************************************
*								*
* Document:	room modifying functions.			*
* Relates to:	/lib/room.c; used by #include <room.h>		*
* Version:	Version 2.04					*
* Last update:	Last update 17-Jul-96 by Graah.			*
* Description:	Describes how rooms are set up, and lists	*
*		those functions used, that standard room object	*
*		defines.					*
*								*
****************************************************************/

Functions:
----------

void	set(int)
void    set_short(string)
void	set_long(string)
void    set_light_level(int)
void    set_light(int)
void    set_exits(mapping)
void    set_items(mapping)
void    set_commands(mapping)

void    add_exit(string, string)
status  add_item(string, string)
status  add_command(string, string)
int     add_monster(string / object / mixed *, string, status)
int     add_object(string / object / mixed *, string, status)
status	add_permanent(string)

status  remove_exit(string)
int     remove_item(string)


Function descriptions and definitions:
--------------------------------------

=================================================================
varargs void set(int [, int])

DESCRIPTION:	Set specified condition for the room.
		Note that some conditions now use 2 arguments
		instead of just one! (for example, ROOM_WD)!

ARGUMENT(int):	The condition to set. These are defined in
		/include/room_defs.h; room.h automatically
		includes these defined values, so use them
		instead of straight integers.

		At the moment, you have following options:

  SKIP_EXITS:	Doesn't show "Obvious exits are..." in long or
		short description.
  SHOW_EXITS:	Shows "Obvious exits are..." - "" -.
		Default value.

  NO_PK:	Player killing isn't allowed in the room.
  YES_PK:	Player killing is allowed in the room.
		Default value.

  PREVENT_TELEPORT: Teleporting to and from the room prevented.
  ALLOW_TELEPORT: Teleporting to and from the room allowed.
		Default value.

  IN_CITY:	Room is inside the main city city walls. Some special
		messages will be heard by player.
  OUT_CITY:	Room is outside the city walls. Default value.

  NO_CLEANUP:	Room won't ever be destructed when "clean_up" is
		executed. Set this, if your room clones wandering
		monsters without using "add_monster".
  YES_CLEANUP:	Room may be destructed in "clean_up", so that we
		can get used memory freed. Default value.
  PREVENT_TELEPORT_TO: Teleporting to room is to be prevented.
  PREVENT_TELEPORT_FROM: Teleporting from room is to be prevented.
  ALLOW_TELEPORT_TO: Allow teleporting to the room.
  ALLOW_TELEPORT_FROM: Allow teleporting from the room.
  ROOM_WD:	Set the weather description mode of the room.
		With this, you _need_ to use 2 arguments!
		Second argument tells which weather descriptions
		player should get in this room. Modes are defined
		in <weatherdesc.h> (which is included by room_defs.h
		too!). Use this instead of old "set_wd()" and
		"set_outdoors()"!
		Currently used values for weather descriptions
		are: WD_INDOORS (indoor rooms with roofs),
		WD_OUTDOORS (outdoor rooms; can rain etc.) and
		WD_NONE (no weather messages should be printed;
		underground tunnels, diving in the sea etc.).
 ROOM_PREVENT_WHERE: Prevent "where"ing location of players in
		this room. Should be checked by all items that
		add commands like standard "where"-command.
 ROOM_ALLOW_WHERE: Allow - "" -.

 ROOM_GUILD:	Room is a guild room, i.e. it is on the area
		of a guild.

 ROOM_ISOLATED: Room that is "isolated" from the game. Who list
		shows only the person him/herself, tells do not
		work, neither shouts, etc. etc. This flag forces
		ROOM_PREVENT_WHERE, ROOM_PREVENT_SHOUT and
		PREVENT_TELEPORT to be on.

------------------------------------------------------------------
void set_short(string)

DESCRIPTION:	Set the short description. This description is
		shown when in brief mode.

ARGUMENT(string): The short description. Do not use period at 
		the end, nor the line feed.
------------------------------------------------------------------
void set_long(string)

DESCRIPTION:	Set the long description. This description is
		shown when in verbose mode.

ARGUMENT(string): The long description. Do not use linefeeds ("\n"),
		except for places where you want a new line begin.
------------------------------------------------------------------
------------------------------------------------------------------
void set_light_level(int)

DESCRIPTION:	Set room light level.

ARGUMENT(int):	Light level. Include lights.h for standard 
		values. /include/lights.h for more info.
------------------------------------------------------------------
void    set_light(int)

DESCRIPTION:	Same as previous (well, _almost_ ...)

NOTE: This is the older function; set_light_level is preferred one.
------------------------------------------------------------------
void set_exits(mapping)

DESCRIPTION:	Set room exits. If you have more than one exit in
		your room, you probably should use one "set_exits"
		instead of many "add_exit"s.

ARGUMENT(mapping): Exits defined with file names and directions.
		Type of: ([ exit_str : object_name_str, ... ])
		Like: set_exits(([ "north" : "/xxx/room1",
		"south" : "/xxx/room2" ]));

NOTE:	This function removes all the exits there were before funtion
	was called. If you want to _add_ exits, use "add_exit" instead.
------------------------------------------------------------------
void set_items(mapping)

DESCRIPTION:	Set all items of the room. This means that if there
		were some items defined earlier, they'll get removed.
		If you want to add items, use "add_item" instead.
		"Item" in this context is a description for a thing,
		usually mentioned in long description of the room,
		but which isn't a real object.
		Item list is in the form of a mapping; index is
		either a string or array of strings; it's the 'name'
		of the item, or list of names in case of an array.

ARGUMENT(mapping): Items list type of: 
		([ name_str:description_str, ... ])
		or ([ ({ name1, name2, ... }):desc_str,...])
------------------------------------------------------------------
void set_commands(mapping)

DESCRIPTION:	Set all commands room defines for player to use.
		Commands for room can be set during the creation
		of the room in create_room() function. No
		init_room() is needed to do it.

ARGUMENT(mapping): List of commands type of:
                   ([ command_str:function_name_str, ... ])

NOTE:	This is preferred way to add commands since you don't have
	to use "init_room" for command initialization. Note also
	that the command execution function you set, has to be a
	public function (not static or private).
------------------------------------------------------------------ 
void add_exit(string, string)

DESCRIPTION: Add one new exit to exit list.

ARGUMENT(string, string): - Exit name ("south" etc.)
                          - File ("/players/tron/room" etc.)

EXAMPLE:	set_exit("east", ROOM_DIR+"kitchen");

Notice use of coder defined constant, ROOM_DIR, which
is used in place of literal file path. ROOM_DIR might
be defined by something like
'#define ROOM_DIR "/players/foobar/rooms/"'.
This allows for greater flexibility when moving area
to another directory.
------------------------------------------------------------------
status add_item(string/array, string)

DESCRIPTION: Add one item to items list.

ARGUMENT(string/string *, string):
		o 1str argument (string or array of strings):
		  Name(s) of item. For example "table" or
		  ({ "big tree", "tree", "oak" }}.
		o 2nd argument: Description ("Nice table.") Don't 
		  use line feeds. Another way to add a synonym is
		  to use description like "=large table"; this
		  adds synonym for item "large table". Preferred
		  way is to use array argument for this function
		  to set all the synonyms at once; still, another
		  way is used for backwards compatibility.

RETURN(status): 1 for success, 0 for failure.
------------------------------------------------------------------
status add_command(string, string)

DESCRIPTION:	Add or remove one command to/from command list.

ARGUMENT(string, string):
		o 1st argument: Command name. For example "
		o 2nd argument: Function name (when adding command)
		  or 0 (when removing command!)

RETURN(status): 1 for success, 0 for failure.

NOTE:	Some standard commands call functions in room-object even
	though commands aren't added, if command hasn't been
	succesfully completed. For example; if player enters
	command "read note", and no commands are added, following
	is done: first we'll check if a physical object named
	"note" (name or synonym is "note") exists in the room or
	in player's inventory. If so, function "read_cmd" is
	called in function. If it returns 0 (or function doesn't
	exists), or no such object exists, command "read_cmd" is
	called in room object. So, you don't have to use
	either "add_command", or "add_action", if you want to
	react to command "read". Other such commands are
	"open", "close", "lock", "unlock", "take", "get" etc.
	Check out directory /bin/pub, and commands therein.
-----------------------------------------------------------------
int add_monster(string / object / mixed *, string, int)

DESCRIPTION:	Add one new monster to the monster loading list.

ARGUMENTS(string / object / mixed *, string, status):
		o 1st argument (string or array of mixed types):
		  string: object_name;  filename of the monster to
		    be cloned and moved to the room.
		  object: Monster that has been added by coder
			during set up of this room. This call only
			marks object as created during create so
			it can safely be dested at clean_up.
			Please _DO_ use these calls too!
		  mixed *: Array of varying elements; definition
			of monster to be added.
		    Structure:
		      1st element: If string; object to be
			cloned as 'base'. Otherwise, standard
			monster object (currently /obj/monster).
			Using standard monster object is strongly
			recommended, whenever possible.
		      Following elements: arrays of form
			({ func_name, arg1, arg2, ... }) in
			which only 1st argument, name of
			function to call, isn't optional.
			Other elements are arguments for the
			function to be called. Max. 4 args.
		    Example:
			add_monster(({ ({ "set_name", "dirty orc" }),
			 ({ "set_level", 10 }),
			 ({ "set_short", "A dirty orc" }),
			 ({ "set_race", "orc" }),
			 ({ "set_long", "It's a big, smelly, dirty orc." }),
			 ({ "set_aggressive", 1 }),
			 ({ "load_chat", 5, ({ "Dirty orc farts.",
				"Dirty orc grunts." }) })
			}), "Dirty orc arrives.", 1)
		o 2nd argument (string):
		  appear_msg - Either message to be shown in the
		  room when monster is created, and arrives to
		  the room, or 0, if no message wanted.
		o 3rd argument (int):
		  reset_status: 1 if monster will be cloned
		  at reset(s), if it has been killed, and 0
		  if monster won't reset.
		  NEW! If it's between 2 and 100, it'll be the
		  percentage chance that the monster will reset
		  if it has been killed.

RETURN(int):	1 for success, 0 for failure.

NOTE:	Please do use "add_monster" whenever possible instead of
	cloning mosnters by yourself. This is more efficient way,
	and usually saves memory!
------------------------------------------------------------------
int add_object(string, string, int)

DESCRIPTION:	Add one general object to the object loading list.

ARGUMENTS(string / object / mixed *, string, status):
		o 1st argument (string or array of mixed types):
		  string: object_name;  filename of the object to
		    be cloned and moved to the room.
		  object: Object that has been added by coder
			during set up of this room. This call only
			marks object as created during create so
			it can safely be dested at clean_up.
			Please _DO_ use these calls too!
		  mixed *: Array of varying elements; definition
			of object to be added.
		    Structure: (basically same as above...)
		      1st element: If string; object to be
			cloned as 'base'. Otherwise, standard
			'basic' object (currently /obj/treasure).
		      Following elements: arrays of form
			({ func_name, arg1, arg2, ... }) in
			which only 1st argument, name of
			function to call, isn't optional.
			Other elements are arguments for the
			function to be called. Max. 4 args.
		    Example:
			add_object(({ WEAPON_FILE,
			 ({ "set_name", "spiked club" }),
			 ({ "set_wc", 10 }),
			 ({ "set_id", ({ "club" }) }),
			 ({ "set_short", "A spiked club" }),
			 ({ "set_long", "It's a typical troll weapon" }),
			 ({ "set_weight", 4 }),
			 ({ "set_hc", -1 }),	// Hit class... bit harder
						// to hit with club!
			}), "You suddenly notice a spiked club on the floor.", 1);
		o 2nd argument (string):
		  appear_msg - Either message to be shown in the
		  room when object is created, and 'arrives' to
		  the room, or 0, if no message wanted.
		o 3rd argument (int):
		  reset_status - 1 if object will be cloned always
		  at reset(s), if it isn't in this room (player or
		  monster has taken it), 0 if object won't reset.
		  NEW! If it's between 2 and 100, it'll be the
		  percentage chance that the object will be resetted
		  if it's not in this room.

RETURN(int):	1 for success, 0 for failure.
------------------------------------------------------------------
int add_permanent(string)

DESCRIPTION:	Add one static object to the room. Usually this is
		something players can't take; a heavy statue,
		bulletin board etc.

ARGUMENT(string):
		o object_name - File name of the object.

RETURN(int):	1 for success, 0 for failure.
------------------------------------------------------------------

Remove functions:
=================================================================
status remove_exit(string)

DESCRIPTION:	Remove an exit that was set with set_exits() or
		add_exit().

ARGUMENT(string): Exit direction to remove (e.g. "south")

RETURN:		1 for success, 0 for failure.

NOTE:	This removes only "one side" of the exit; you may have
	to remove "other side" of the exit from the destination
	room too.
----------------------------------------------------------------
int remove_item(string)

DESCRIPTION:	Remove a room description item.

ARGUMENT(string): Item to remove. (e.g. "table").

RETURN(int):	Number of removed items is returned (item can
		have synonyms that are also removed).
---------------------------------------------------------------
