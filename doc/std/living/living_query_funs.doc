/****************************************************************
*								*
* Document:	living query functions.				*
* Relates to:	/lib/living.c. Used by standard npc (Non-Player	*
		Character) and player				*
*		objects (inheritted by them).			*
* Version:	Version 2.00					*
* Last update:	26-may-95 by Doomdark.				*
* Description:	Describes how various things can be queried	*
*		from both npc and player objects, which both	*
*		inherit living.c. All query functions from	*
*		living.c listed along with their calling syntax	*
*		and results they give.				*
*								*
****************************************************************/

Query-functions of standard living object; standard living object
is part of every player and npc object.

Almost all functions start with "query_", or "is_"; only couple
don't; generally, those starting with "is_" return only status;
(true/false; == 1/0) for some specific condition. Other functions
usually return more varied results.

Note that there are many files where functions are splitted;
biggest is the "/lib/living.c"; it also inherits or includes
other files (which reside mostly in directory "/basic/living").

Functions are grouped so that you see in which file a particular
function can be found. First there is a list of all query-functions,
and after that, more or (usually) less detailed description of
each function.
----------------------------------------------------------------------------
 
/****************************************************************
*								*
*			QUERY-FUNCTIONS				*
*								*
****************************************************************/

************
/basic/id.c:
************

NOTE:	These functions are described in detail in another doc-file
	handling this module as it is used by almost every object in
	mud.
	Also note that all of these are re-defined in living.c, player.c
	or monster.c.

string	query_name(int, object);	// 1st and 2nd args optional.
string	query_short(int, object);	// - "" -
string	query_long(string, object);	// - "" -
int	query_invis();			// Invisibility level of object.

***************************
/basic/object/dimensions.c:
***************************

NOTE:	As with /basic/id.c, these functions are (will be?) documented
	better elsewhere...

int	query_weight_kg();	// Returns weight of living in kilograms.
int	query_weight();		// Returns weight in some strange units... :-)
int	query_width();		// Returns width of living in centimetres.
int	query_height();		// Returns height (tallness) - "" -
int	query_depth();		// Returns 3rd dimension of - "" -
int*	query_size();		// Returns array of above mentioned dimensions.

***********************
/basic/living/gender.c:
***********************

int	query_gender();		// Return gender as integer value; values defined
				// in "/include/gender.h"
string	query_gender_string();	// Returns "neuter" / "male" / "female"
				// depending on gender of living.
string	Pronoun();		// Returns "it" / "he" / "she" depending on gender.
string	query_pronoun();		// - "" -
string	Possessive();		// Returns "its" / "his" / "her" - "" -
string	query_possessive();	// - "" -
string	Objective();		// Returns "it" / "him" / "her" - "" -
string	query_objective();	// - "" -

*********************
/basic/living/race.c:
*********************

string	query_race();		// Returns race of the living; if it's 0, we can
				// presume it means "human".
int	query_infravision();	// Returns how good infravision living has;
				// 0 = no infravision, 5 highest.
int	query_race_stat(int);	// Return one of 11 racial statistic;
				// See /include/race.h for possible statistics.
				// Argument defines stat to return.
				// Currently we have following stats:
				//	o RACE_HP_RATE
				//	o RACE_SP_RATE
				//	o RACE_DRUNKNESS_RATE
				//	o RACE_DAMAGE_RATE
				//	o RACE_AC_RATE
				//	o RACE_CARRY_RATE
				//	o RACE_NATURAL_WC
				//	o RACE_NATURAL_AC
				//	o RACE_HEAL_RATE
				//	o RACE_SP_HEAL_RATE
				//	o RACE_EAT_RATE

***************************
/basic/living/conditions.c:
***************************

int	query_condition(int)	// Returns how long we stay in a condition
				// specified by argument.
mapping	query_conditions()	// Returns mapping consisting of all conditions
				// living has.
status	query_can_move()	// Returns true if living is able to move;
				// otherwise sets notify_fail and returns false.
status	query_can_see()		// As above, except for seeing.

***********************
/basic/living/skills.c:
***********************

mapping	query_liv_Skills()	// Returns mapping of all skills living has.
int	query_skill(string, int) // Returns data about specific skill specified
				// by 1st argument; 2nd optional argument specifies
				// which data is wanted; it'll be index of array
int	query_skill_value(string) // As with above, but returns absolute skill
				// value (which is 1000 times bigger).
mixed	query_liv_Skill(string)	// Return whole array of skill data of a
				// specific skill.
string	list_skills()		// Returns nicely formatted list of all skills.

*********************
/basic/living/pets.c:
*********************

object	query_master()		// Returns object living is following (or 0).
object*	query_pets()		// Returns array of objects following us.
status	query_follow_master()	// Returns true if we are following the master.
status	query_defend_master()	// Returns true if we will defend the master.

********************************
/basic/living/weapon_handling.c:
********************************

int	query_wc()		// Returns weapon class of the weapon living
				// is wielding (or wc of bare hands if none wielded)
int	query_hc()		// Returns hit class of the weapon living is
				// wielding (or 0 if none wielded).
int	query_damage_type()	// Returns type of damage living does when hitting
				// 'normally', ie. with a weapon or bare hands.
object	query_weapon()		// Returns weapon living is wielding, or 0 if
				// none wielded.

********************************
/basic/living/armour_handling.c:
********************************

int	query_ac()		// Returns armour class of living.

**************************
/basic/living/abilities.c:
**************************
int query_stat(int stat)	// Returns value of a specified stat. Possible
				// stats are ST_STR, ST_DEX, ST_CON, ST_INT,
				// ST_FAT, and respectively, ST_BASE_STR etc.
				// More info from doc "stats.doc".

*********************
/basic/living/luck.c:
*********************

int	query_luck()		// Returns luck of living; -10 <-> +10.
int	query_temp_luck()	// Returns temporary luck of living.
int	query_item_luck()	// Returns luck of items living has.
int	query_random_luck()	// Returns random value between 0 and
				// (luck + temp_luck + item_luck - 1)

***********************
/basic/living/moving.c:
***********************

string query_move_msg(string)	// Returns one of living's move messages;
				// which message, depends on argument.
				// Values currently used as argument are
				// "msgin" (normal arrive msg),
				// "msgout" (normal leave msg),
				// "mmsgin" (arrive message when teleporting),
				// "mmsgout" (leave - "" -)

***********************
/basic/living/death.c:
***********************

status	query_death_mark()	// Returns true if player is ghost; ie. has
				// died but not yet resurrected.

**************
/lib/living.c:
**************

int query(int x)		// Returns specified info about living. Possible
				// values for x are LIV_JUST_MOVED, LIV_BRIEF,
				// LIV_BRIEF_WEATHER, LIV_NOT_JUST_MOVED,
				// LIV_NOT_BRIEF, LIV_NOT_BRIEF_WEATHER.
string	query_real_name()	// Returns 'real name' of living regardless
				// of disguise or invisibility.
string	query_name(int, object)	// Returns name of the living; arguments are
				// optional.
status	is_npc()		// If this living is player, returns 0,
				// otherwise 1.

int	query_hp()		// Returns amount of hps living has.
int	query_max_hp()		// Returns amx. amount of hps living may have.
int	query_sp()		// Returns amount of sps living has.
int	query_max_sp()		// Returns amx. amount of sps living may have.
int	query_fp()		// Returns amount of fps living has. (fatigue p.)
int	query_max_fp()		// Returns amx. amount of fps living may have.
int	query_ep()		// Return amount of experience points living has.
int	query_level()		// Returns level of living.
int	query_alignment()	// Returns alignment value of living.
int	query_money()		// Return amount of gold coins living has.

status	query_is_fleeing()	// Returns true if living is fleeing.

status	query_dead()		// Returns true if living is dead.
status	query_ghost()		// Returns true if living is a ghost.
status	query_undead()		// Returns true if living is undead (zombie etc.).

object	query_attack()		// Returns primary enemy we're fighting, if any.
object	query_alt_attack()	// Returns secondary - "" -
object*	query_hunted()		// Returns array of livings we are hunting.
object	query_hitter()		// Returns object that last hit us.
int	query_wimpy()		// Returns wimpy-level of living; 0 == brave mode.

status	query_rest()		// Returns true if living is resting.
status	query_sit()		// Returns true if living is sitting.
int	query_age()		// Return "age" of living; seconds from
				// its creation.
status	query_frog()		// Returns true if living has frog curse.
int	query_time_to_heal()	// Returns heart-beats to next heal-hb.
int	query_local_weight()	// Returns weight of living plus weight of
				// items it carries (in some odd units...).

int	query_intoxication()	// Returns intoxication level of living.
				// (ie. how drunk it is).
int	query_stuffed()		// Returns how 'full' player is (food).
int	query_soaked()		// - "" -		(non-alcoholic liquids).

int	query_night()		// Returns how much night reduces light level
				// in the room living is in (0 if indoors or
				// it isn't night).
status	query_is_immune_vs_obj(object)
				// Redefinable function; should return true if
				// living is immune against object given.

string	get_short(object, object) // Returns short description of the object
				// given as argument 1 (as seen by object given
				// as optional arg. 2). If living is hallucinating,
				// this'll return some wierd desc... :-)
string	get_name(object, object) // Like above, but returns name instead of
				// short description.

status	test_dark()		// Tests whether living is unable to see due to
				// darkness or blindness. Uses 'query_can_see';
				// so no need to use it if you use this.
status	test_dark2(int, int, status)
				// Like above, except that it's faster; arguments
				// are: 'room->query_light_level(),
				// living->query_night(), obj_to_see_is_living'.
				// This is used if you want to know whether living
				// can see a specific object. Used by "move_player",
				// for example.
status	test_if_any_here()	// Returns true if there are players (other than,
				// possibly, this living) in the same room.

/****************************************************************
*								*
*		Descriptions of functions.			*
*								*
****************************************************************/

/basic/id.c:
/basic/object/dimensions.c:
/basic/living/gender.c:
/basic/living/race.c:
/basic/living/conditions.c:
/basic/living/skills.c:
/basic/living/pets.c:
/basic/living/tell_me.c:
/basic/living/guild.c:
/basic/living/weapon_handling.c:
/basic/living/armour_handling.c:
/basic/living/abilities.c:
/basic/living/luck.c:
/basic/living/moving.c:
/basic/living/spells.c:
/basic/living/death.c:
/basic/living/command_driver.c:
/lib/living.c:

/****************************************************************
*								*
*			That's all folks!!!			*
*								*
****************************************************************/
