/****************************************************************
*								*
* Document:	npc query functions.				*
* Relates to:	/lib/npc.c; used with #include <npc.h>		*
* Version:	Version 2.01					*
* Last update:	Last update 9-May-98 / Graah.			*
* Description:	Describes functions with which you can query	*
*		various things about NPCs (Non-Player Characters)
*		(usually referred as "monsters"...). Each	*
*		query funtions is listed along with possible	*
*		arguments, and return value.			*
*								*
****************************************************************/

Query-functions of standard monster object (that you should use
with "#include <npc.h>" as 1st line of your monster's code).

Almost all functions start with "query_", or "is_"; only couple
don't; generally, those starting with "is_" return only status;
(true/false; == 1/0) for some specific condition. Other functions
usually return more varied results.

Standard monster object consists of few different files; the main
file is "/lib/npc.c"; lots of code is in /basic/ directory tree and
in file "/lib/living.c".

Functions are grouped so you can see in which file a particular
function resides. At the moment, though, most functions are in
monster.c
----------------------------------------------------------------------------
 
/****************************************************************
*								*
*			QUERY-FUNCTIONS				*
*								*
****************************************************************/

****************
/basic/npc/guild
****************

-----------------------------------------------------------------------------
string	query_guild()

DESCRIPTION:
	Which guild this npc belongs to, if any. Note that this is usually
	symbolic; ninja npcs will appear as belonging to ninja-guild and
	so on. Nevertheless, guild should be set with function
	"set_guild" (check out monster_modify_funs.doc!).

RETURN(string):
	Guild this npc belongs to, if any.
-----------------------------------------------------------------------------

*************************
/basic/npc/command_driver
*************************

------------	No query-functions -------------

************
/lib/npc
************

-----------------------------------------------------------------------------
int	query(int)

DESCRIPTION:
	General query function to be used when querying one of
	basic conditions. Possible conditions to be queried are,
	at the moment:

	NPC_AGGRESSIVE:	Is npc aggressive (to players)?
	NPC_NOT_AGGRESSIVE:	Is npc non-aggressive (to players)?
	NPC_MONS_AGGRESSIVE:	Is npc aggressive to other npcs?
	NPC_NOT_MONS_AGGRESSIVE: Is npc non-aggressive to other npcs?
	NPC_NO_CONDITION:	Are condition texts prevented from long
				description of this npc?
	NPC_YES_CONDITION:	Are condition texts printed with long desc?
	NPC_MOVE_AT_RESET:	Will this npc move at reset?
	NPC_DONT_MOVE_AT_RESET:	Will this npc _not_ move at reset?
	NPC_FOLLOW_ATTACKER:	Will this npc follow its enemies?
	(NPC_DONT_FOLLOW_ATTACKER): reverse of previous
	NPC_SET_PK_FLAG:	This monster sets pk flag if attacked.
				Can be attacked in no-pk areas, of course.
	NPC_NO_CORPSE		If 1, the monster is incorporeal; it won't
				leave a corpse. If this is set to 2..100,
				then it is the percentage change that the
				monster does leave a corpse.

                                If you use NPC_NO_CORPSE, check that your
                                monster doesn't try to mess with its
                                corpse during its death.

NOTE:	To use this function, you need to include header file
	"npc_defs.h" with '#include <npc_defs.h>'! It defines constants
	used as arguments!
	As you can see, each query has "reverse"-query; this is needed
	in "set"-function, and those are included here for compatibility.

RETURN(int):
	Whether asked condition was true; 0 -> No, non-zero -> Yes.
-----------------------------------------------------------------------------
int	query_wander()

DESCRIPTION:
	Chance of this monster to wander somewhere at its heart beat
	(happens every 2 seconds), in percents.

RETURN(int):
	Percentage chance that monster wanders using some obvious exit.
-----------------------------------------------------------------------------
int	query_spell_dmg()

DESCRIPTION:
	Maximum damage this monster can do with its special attack.

RETURN(int):	
	Max. damage in hit points.
-----------------------------------------------------------------------------
int	query_breath_dmg()

DESCRIPTION:
	Maximum damage this monster can do with its breath attack.

RETURN(int):
	Max. damage in hit points.
-----------------------------------------------------------------------------
object	query_possessed_by()

DESCRIPTION:
	Object that 'possesses' this monster. With this objects can 'snoop'
	monsters.

RETURN(object):
	Object possessing us.
-----------------------------------------------------------------------------
string	query_ctrl()

DESCRIPTION:
	Who is controlling us; usually either no-one, or some coder. Monsters
	that are controlled by a coder, won't do full MK (Monster Kill;
	player loses more exp and stats). Controlling can be handled by
	special monster controllers (ask co-admins/admins about usage,
	and when/how it can be used).

NOTE:
	Some guilds (necromancers, for one) use this to mark that some monster
	is controlled by a player, and won't cause normal "monster kill",
	against players, but "player kill".

RETURN(string):
	Name of coder controlling the monster; 0 if no-one is controling it.
-----------------------------------------------------------------------------

/****************************************************************
*								*
*			That's all folks!!!			*
*								*
****************************************************************/

Well, not quite all...you got to

	set(NPC_SET_PK_FLAG, 1)

for it to work. Don't know why.
