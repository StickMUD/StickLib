SYNOPSIS
	cc [-p] [-c] [-i] <file/object/here>

DESCRIPTION

	cc compiles an object. This is done by destructing the object and
	then calling a dummy function from it (which causes the gamedriver
	to compile it), using the catch() efun to catch errors.

	If the specified object exists in the caller's inventory or 
	environment, the object's filename will be compiled rather than
	the specified name.  The object will be dested, compiled, and
	re-cloned into its original environment.

	All players in the inventory of the compiled object will be
	preserved thru the compile.  If there are compile errors, the
	players will be moved to a backup room.  All non-player objects
	in the inventory of the compiled object will be destructed 
	unless the -p flag is specified.

	Flag arguments are:

		-p :	Preserve objects that are in the object to be
			compiled. If this option is not specified, objects
			in the compiled object will be destructed, except
			players who are always preserved.
			 
		-c :	Clone the object after it is compiled, and if
			possible, move it to the caller or the caller's
			environment.

		-i :	Compile the specified object and all objects
			that are inherited by it, beginning with at the
			lowest inheritance level.

	Note:	If there already exist clones of the object that is compiled,
		those clones are not affected by the compile or changed in
		any way. To be affected, they must be destructed and re-cloned
		from the newly-compiled object.


EXAMPLES

	cc -c /std/torch	- compiles /std/torch.c and clones it to
				  the caller or the caller's environment.

	cc -p here		- compiles the caller's environment,
				  preserving objects.

	cc guide		- If guide is here, he will be destructed,
				  compiled, and re-cloned. Otherwise, try to
				  compile guide.c in the current directory.

	cc -i /std/npc		- compiles /std/npc.c and all of it's
				  inherited objects.

SEE ALSO:  destruct(efun), clone(coder)

Last updated: 03-Oct-96 by Germ.
